---
import '../../styles/global.css';
import SkipLink from './SkipLink.astro';

export interface Props {
  title: string;
  description?: string;
  lang?: 'de' | 'en';
}

const { 
  title, 
  description = 'Freelance Senior Software Engineer - Full-stack development, project management, and DevOps expertise',
  lang = 'de'
} = Astro.props;
---

<!DOCTYPE html>
<html lang={lang}>
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content={description} />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    
    <!-- SEO Meta Tags -->
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:type" content="website" />
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content={title} />
    <meta name="twitter:description" content={description} />
    
    <!-- Accessibility -->
    <meta name="theme-color" content="#E8B4B8" />
    
    <!-- Preload fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet" />
    
    <title>{title}</title>
  </head>
  <body>
    <SkipLink lang={lang} />
    <slot />
    
    <script>
      // Initialize language from localStorage or browser preference
      function initializeLanguage() {
        const stored = localStorage.getItem('language');
        const browserLang = navigator.language.split('-')[0];
        const supportedLangs = ['de', 'en'];
        
        let currentLang = 'de';
        if (stored && supportedLangs.includes(stored)) {
          currentLang = stored;
        } else if (supportedLangs.includes(browserLang)) {
          currentLang = browserLang;
        }
        
        document.documentElement.lang = currentLang;
        localStorage.setItem('language', currentLang);
        
        // Update all translatable elements
        updateTranslations(currentLang);
      }
      
      function updateTranslations(lang: string) {
        // This will be handled by the language switcher component
        window.dispatchEvent(new CustomEvent('languageChange', { detail: lang }));
      }
      
      // Smooth scrolling for anchor links
      function initializeSmoothScrolling() {
        document.querySelectorAll('a[href^="#"]').forEach(anchor => {
          anchor.addEventListener('click', function (e) {
            e.preventDefault();
            const target = document.querySelector(this.getAttribute('href'));
            if (target) {
              target.scrollIntoView({
                behavior: 'smooth',
                block: 'start'
              });
              
              // Update focus for accessibility
              target.focus();
            }
          });
        });
      }
      
      // Initialize on DOM load
      document.addEventListener('DOMContentLoaded', () => {
        initializeLanguage();
        initializeSmoothScrolling();
      });
      
      // Handle reduced motion preference
      if (window.matchMedia('(prefers-reduced-motion: reduce)').matches) {
        document.documentElement.style.scrollBehavior = 'auto';
      }
    </script>
  </body>
</html>

<style is:global>
  /* Additional global styles specific to layout */
  body {
    min-height: 100vh;
    display: flex;
    flex-direction: column;
  }
  
  main {
    flex: 1;
  }
  
  /* Ensure proper focus management */
  [tabindex="-1"]:focus {
    outline: none;
  }
  
  /* Improve text rendering */
  body {
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
    text-rendering: optimizeLegibility;
  }
</style>
